# Create-Everything.ps1
# Builds ALBUM_RELEASE_ORDER.txt, RADIO_TRACK_ORDER.txt, playlist.json, backgrounds.json, index.html
# Folders required: music/ (your mp3s, subfolders = albums), img/ (your images)

$ErrorActionPreference = 'Stop'
$root = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location $root

function RelPath($full){ ($full.Replace($root,'').TrimStart('\','/') -replace '\\','/') }
function NiceCase([string]$s){
  if(-not $s){return ""}
  $s=$s -replace '[_\-]+',' ' ; $s=$s.Trim()
  $w=$s.Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
  $small='and','or','of','the','a','an','in','on','to'
  $out=foreach($x in $w){ if($small -contains $x.ToLower()){ $x.ToLower() } elseif($x.Length -gt 1){ $x.Substring(0,1).ToUpper()+$x.Substring(1).ToLower() } else{ $x.ToUpper() } }
  ($out -join ' ')
}
function ParseAlbumTrack($rel){
  $p=($rel -replace '\\','/').Split('/')
  $album="" ; $file=$p[-1] ; $stem=[IO.Path]::GetFileNameWithoutExtension($file)
  if($p.Length -ge 3){ $album=$p[1] } elseif($stem -match '^([^_]+)_(.+)$'){ $album=$matches[1]; $stem=$matches[2] }
  $trackNo=9999; if($stem -match '^\s*([0-9]{1,3})[ _\-\.\)]*(.*)$'){ $trackNo=[int]$matches[1]; $stem=$matches[2] }
  [pscustomobject]@{ Album=NiceCase($(if($album){$album}else{"Singles"})); TrackNo=$trackNo; TrackName=NiceCase($stem) }
}

# Folders
$music=Join-Path $root 'music'; if(!(Test-Path $music)){ throw "music/ folder not found" }
$img=Join-Path $root 'img'; if(!(Test-Path $img)){ New-Item -ItemType Directory -Path $img | Out-Null }

# Scan mp3s
$files=Get-ChildItem -Path $music -Recurse -File -Include *.mp3
if(!$files -or $files.Count -eq 0){ throw "No .mp3 files found under music/" }

# Build track records
$tracks = foreach($f in $files){
  $rel=RelPath $f.FullName; $m=ParseAlbumTrack $rel
  [pscustomobject]@{ Rel=$rel; Album=$m.Album; TrackNo=$m.TrackNo; TrackName=$m.TrackName }
}

# === ALBUM RELEASE ORDER (create if missing, with header comments) ===
$albumFile = Join-Path $root 'ALBUM_RELEASE_ORDER.txt'
$albums = ($tracks | Select-Object -Expand Album | Sort-Object -Unique)

if(!(Test-Path $albumFile)){
  @(
    "# ALBUM_RELEASE_ORDER.txt",
    "# One album name per line, top = first in your radio sequence.",
    "# Edit this file to your release order. New albums are auto-appended next run.",
    "# Lines starting with # are ignored.",
    ""
  ) + $albums | Set-Content -Encoding UTF8 $albumFile
  Write-Host "Created ALBUM_RELEASE_ORDER.txt (alphabetical). Edit it to match your release order."
}

# Use user order + append any new albums
$userOrder = Get-Content $albumFile | Where-Object { $_ -and $_ -notmatch '^\s*#' } | ForEach-Object { $_.Trim() }
$extra = $albums | Where-Object { $_ -notin $userOrder }
$albumOrder = @($userOrder + $extra)

# Group and sort tracks inside each album
$byAlbum = $tracks | Group-Object Album | ForEach-Object {
  $_.Group | Sort-Object @{Expression='TrackNo';Ascending=$true}, @{Expression='TrackName';Ascending=$true}
} | Group-Object Album

# Build final ordered list
$ordered = New-Object System.Collections.Generic.List[Object]
foreach($alb in $albumOrder){ $grp=$byAlbum | Where-Object { $_.Name -eq $alb }; if($grp){ foreach($t in $grp.Group){ $ordered.Add($t) } } }

# === RADIO TRACK ORDER (always re-generated, with header comments) ===
$radioFile = Join-Path $root 'RADIO_TRACK_ORDER.txt'
@(
  "# RADIO_TRACK_ORDER.txt",
  "# Auto-generated full play order (Album -> Track 01..N).",
  "# Do not edit this file; edit ALBUM_RELEASE_ORDER.txt or your music folder/filenames instead.",
  "# Each line is a relative path used in the playlist:",
  ""
) + ($ordered | ForEach-Object { $_.Rel }) | Set-Content -Encoding UTF8 $radioFile

# === playlist.json (objects with src + nice title) ===
$playlistPath = Join-Path $root 'playlist.json'
$ordered | ForEach-Object {
  [pscustomobject]@{ src = $_.Rel; title = "$($_.Album) - $($_.TrackName)" }
} | ConvertTo-Json -Depth 3 | Set-Content -Encoding UTF8 $playlistPath

# === backgrounds.json (pool for random rotation) ===
$bgPrefer = Get-ChildItem -Path $img -File -Include background*.png,background*.jpg,background*.jpeg,background*.gif,background*.webp
$others  = Get-ChildItem -Path $img -File | Where-Object {
  $_.Name -notmatch '^blue-sun' -and $_.Name -notmatch '^logo' -and $_.Name -notmatch '^favicon' -and $_.Extension -match '\.(png|jpg|jpeg|gif|webp)$'
}
$bgList = @($bgPrefer + $others | Sort-Object Name -Unique) | ForEach-Object { "img/" + $_.Name }
($bgList | ConvertTo-Json) | Set-Content -Encoding UTF8 (Join-Path $root 'backgrounds.json')

# === index.html (writes/overwrites; uses random background & playlist titles) ===
$indexPath = Join-Path $root 'index.html'
$index = @"
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Grand Element Radio</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { --fg:#eaf6ff; --accent:#5ec5ff; --accent2:#ff6a00; }
    *{box-sizing:border-box} html,body{height:100%}
    body{ margin:0; min-height:100vh; color:var(--fg);
          font-family:system-ui, Segoe UI, Roboto, Arial, sans-serif;
          display:flex; overflow-x:hidden; }
    .wrap{ margin:auto; width:min(980px,94vw); padding:28px; text-align:center; }
    .logo{ width:min(260px,60vw); height:auto; border-radius:50%; filter: drop-shadow(0 0 24px rgba(94,197,255,.55)); margin:4px 0 12px; }
    h1{margin:8px 0 2px; font-weight:700; letter-spacing:.3px}
    p.help{opacity:.85;margin:2px 0 16px}
    .panel{ background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border:1px solid rgba(255,255,255,.10); border-radius:16px; padding:16px 14px;
            box-shadow: 0 10px 30px rgba(0,0,0,.45); backdrop-filter: blur(2px); }
    .now{font-weight:600; margin:8px 0 10px; font-size:1.06rem}
    .controls{display:flex; gap:10px; justify-content:center; flex-wrap:wrap; margin:8px 0 8px}
    .btn{ appearance:none; border:0; padding:10px 14px; border-radius:10px; background:#141d2b; color:#eaf6ff;
          cursor:pointer; font-weight:600; border:1px solid rgba(255,255,255,.12); }
    .btn:hover{background:#1b2537}
    .btn.accent{ background:var(--accent); color:#03111b; border-color:transparent; }
    .btn.accent:hover{ filter:brightness(1.05) }
    .pill{padding:8px 12px; border-radius:999px; background:#0f1826; display:inline-block; font-size:.9rem;
          opacity:.95; border:1px solid rgba(255,255,255,.12)}
    audio{ width:100%; margin-top:8px; transform: scale(1.25); transform-origin: center top; }
    a.button{ display:inline-block; padding:10px 18px; margin-top:14px; background:var(--accent2); color:#fff;
              text-decoration:none; border-radius:10px; font-weight:700; box-shadow: 0 6px 16px rgba(255,106,0,.25); }
    a.button:hover{ filter:brightness(1.05) }
    .err{color:#ff8a8a; margin-top:10px} .ok{opacity:.85; font-size:.95rem; margin-top:6px}
    body::before{ content:""; position:fixed; inset:0; z-index:-1; background:#000 center/cover no-repeat fixed; background-image: var(--bg-img, none); }
  </style>
</head>
<body>
  <div class="wrap">
    <!-- Optional logo: place blue-sun*.png or logo*.png in /img -->
    <!-- <img class="logo" src="img/blue-sun.png" alt="Grand Element" /> -->

    <h1>Grand Element Radio</h1>
    <p class="help">Music created to help set your soul free. Enjoy!!</p>

    <div class="panel">
      <div class="now" id="now">Loading...</div>
      <div class="controls">
        <button class="btn" id="prevBtn" title="Previous (Left Arrow)">Prev</button>
        <button class="btn accent" id="nextBtn" title="Next (Right Arrow)">Next</button>
        <button class="btn" id="shuffleBtn" title="Toggle Shuffle">Shuffle: <span id="shufState">On</span></button>
        <span class="pill" id="counter">0 / 0</span>
      </div>
      <audio id="player" controls preload="none"></audio>
      <div id="msg" class="ok"></div>
    </div>

    <a class="button" href="https://grandelement.bandcamp.com" target="_blank" rel="noopener">Buy on Bandcamp</a>
  </div>

  <script>
    // Random rotating background
    fetch('backgrounds.json', {cache:'no-store'}).then(r=>r.ok?r.json():[]).then(list=>{
      if(Array.isArray(list) && list.length){ const pick=list[Math.floor(Math.random()*list.length)];
        document.body.style.setProperty('--bg-img', 'url("'+pick+'")'); }
    }).catch(()=>{});

    const audio=document.getElementById('player'), nowEl=document.getElementById('now'), counterEl=document.getElementById('counter');
    const shufBtn=document.getElementById('shuffleBtn'), shufStateEl=document.getElementById('shufState');
    const nextBtn=document.getElementById('nextBtn'), prevBtn=document.getElementById('prevBtn'), msg=document.getElementById('msg');

    let items=[], library=[], titleMap=new Map(), order=[], i=0, shuffleOn=true;

    function prettyTitle(p){ return p.split('/').pop().replace(/\.[^.]+$/,'').replace(/[_-]+/g,' ').trim(); }
    function displayTitle(src){ return titleMap.get(src) || prettyTitle(src); }
    function shuffle(arr){ const a=arr.slice(); for(let k=a.length-1;k>0;k--){const j=(Math.random()*(k+1))|0; [a[k],a[j]]=[a[j],a[k]]} return a; }

    function setOrder(){ const cur=audio.src?library.find(p=>audio.src.includes(p)):null; order=shuffleOn?shuffle(library):library.slice();
      if(cur){ const keep=order.indexOf(cur); i=keep>=0?keep:0; } else { i=0; } counterEl.textContent=(order.length?(i+1)+' / '+order.length:'0 / 0'); }

    function loadTrack(idx){ if(!order.length){ nowEl.textContent='No tracks loaded'; return; } i=(idx+order.length)%order.length;
      const src=order[i]; audio.src=src+'?v='+Date.now(); nowEl.textContent='Now playing: '+displayTitle(src); counterEl.textContent=(i+1)+' / '+order.length;
      if('mediaSession' in navigator){ navigator.mediaSession.metadata=new MediaMetadata({title:displayTitle(src),artist:'Grand Element',album:'Grand Element Radio'}); 
        try{navigator.mediaSession.setActionHandler('previoustrack',()=>loadTrack(i-1))}catch(e){} try{navigator.mediaSession.setActionHandler('nexttrack',()=>loadTrack(i+1))}catch(e){}
        try{navigator.mediaSession.setActionHandler('play',()=>audio.play())}catch(e){} try{navigator.mediaSession.setActionHandler('pause',()=>audio.pause())}catch(e){}
      }
      audio.play().catch(()=>{}); }

    audio.addEventListener('play', ()=>{ if(navigator.mediaSession) navigator.mediaSession.playbackState='playing'; });
    audio.addEventListener('pause', ()=>{ if(navigator.mediaSession) navigator.mediaSession.playbackState='paused'; });

    async function boot(){
      const r=await fetch('playlist.json',{cache:'no-store'}); if(!r.ok) throw new Error('playlist.json not found');
      const raw=await r.json(); items=raw.map(x=>typeof x==='string'?({src:x,title:null}):x);
      library=items.map(o=>o.src); titleMap=new Map(items.map(o=>[o.src,o.title])); msg.textContent='Loaded '+items.length+' tracks';
      setOrder(); loadTrack(i);
      audio.addEventListener('ended',()=>loadTrack(i+1)); nextBtn.addEventListener('click',()=>loadTrack(i+1)); prevBtn.addEventListener('click',()=>loadTrack(i-1));
      shufBtn.addEventListener('click',()=>{ shuffleOn=!shuffleOn; shufStateEl.textContent=shuffleOn?'On':'Off'; setOrder(); });
      window.addEventListener('keydown',e=>{ if(e.key==='ArrowRight'){e.preventDefault();loadTrack(i+1)} if(e.key==='ArrowLeft'){e.preventDefault();loadTrack(i-1)} });
    }
    boot().catch(err=>{ nowEl.textContent='Error: '+err.message; msg.className='err'; msg.textContent='Tip: ensure playlist.json exists.'; });
  </script>
</body>
</html>
"@

$index | Set-Content -Encoding UTF8 $indexPath

Write-Host "DONE."
Write-Host "Created/updated:"
Write-Host " - ALBUM_RELEASE_ORDER.txt (edit to set album order)"
Write-Host " - RADIO_TRACK_ORDER.txt (auto-generated full track order)"
Write-Host " - playlist.json (player uses this)"
Write-Host " - backgrounds.json (image pool for random rotation)"
Write-Host " - index.html (player page)"
